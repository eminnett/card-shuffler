##
# This class represents a single playing card. The card has a suit and a value.
# The card is either a face card or a pip card.

class Card
  SPADES      = :spades
  HEARTS      = :hearts
  DIAMONDS    = :diamonds
  CLUBS       = :clubs
  SUITS       = [SPADES, HEARTS, DIAMONDS, CLUBS]
  SUITS_SHORT = {SPADES => "S", HEARTS => "H", DIAMONDS => "D", CLUBS => "C"}

  KING        = :king
  QUEEN       = :queen
  JACK        = :jack
  FACES       = [JACK, QUEEN, KING]
  FACE_VALUES = {JACK => 11, QUEEN => 12, KING => 13}
  VALUES      = (1..10).to_a + FACES

  attr_reader :suit, :value

  def initialize(params = {})
    if params.has_key?(:value)
      @value = params[:value]

      # Convert numeric values that represent face cards where appropriate.
      @value = self.class.face_symbol_from_value(@value)

    else
      @value = VALUES.sample
    end

    @suit  = params.has_key?(:suit)  ? params[:suit]  : SUITS.sample

    raise "Instances of Card must have a value in #{VALUES.to_s}" unless VALUES.include? @value
    raise "Instances of Card must have a suit in #{SUITS.to_s}"   unless SUITS.include?  @suit
  end

  # Is this a face card?
  def face_card?
    FACES.include? @value
  end

  # Is this a pip card?
  def pip_card?
    !face_card?
  end

  # Returns a string representation of the card.
  def to_s
    value = @value == 1 ? "ace" : @value
    "the #{value} of #{suit}"
  end

  # Returns a string representation of the card with
  # a numeric value and single letter suit in the form "v:s".
  def to_short_s
    v = face_card? ? Card::FACE_VALUES[value] : @value
    s = Card::SUITS_SHORT[@suit]

    "#{v}:#{s}"
  end

  # Converts a value generated by to_short_s back
  # into a hash that can be used to generate a new card.
  def self.convert_short_string_to_hash(short_string)
    info = short_string.split(":")

    v = info[0].to_i
    v = self.face_symbol_from_value(v)
    s = Card::SUITS_SHORT.invert[info[1]]

    {:value => v, :suit => s}
  end

  # Sorter to organise possible values given a comparison
  # of both integers and symbols
  def self.value_sorter(x, y)
    x = FACES.include?(x) ? FACE_VALUES[x] : x
    y = FACES.include?(y) ? FACE_VALUES[y] : y
    x <=> y
  end

  private

  # Convert numeric values that represent face cards back to their
  # symbol where appropriate. If not appropriate, the given value is returned.
  def self.face_symbol_from_value(value)
    if value.is_a?(Integer) && value > 10 && FACE_VALUES.invert.has_key?(value)
      FACE_VALUES.invert[value]
    else
      value
    end
  end

end